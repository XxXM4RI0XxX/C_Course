				C

Es un lenguaje que traduce directamente a lenguaje maquina, lo que lo hace mas rapido que otros IDE. Aprenderlo al parecer es facil, lo dificil viene al momento de conocer los apuntadores, veremos que pasa...

Por ahora la sintaxis es muy parecida a la de Java, comentarios, tipos de datos etc...

Información. Es un conjunto de datos que por si solos no dicen nada, pero en conjunto pueden decir cualquier cosa.

C es programacion estructurada, un conjunto de instrucciones que se ejecutan una detras de otra.

En C se puede escribir en cualquier lugar del documento, EN CUALQUIERA!

Los corrimientos (>>/<<) no mueven el valor en si, mueven sus valores en binario, ej:
0101 >> 1 = 0010 | 11001 << 2 = 00100 | 1111111 >> 389843798047 = 0000000

Imprimir en pantalla es imprimir siempre en StringFormat, (declarando primero la "ubicacion" y el %tipo% de dato a escribir, para despues señalar que dato es el que se va a representar).

Caracteres de modificación:
%c char
%d entero
%u entero sin signo en base decimal
%o entero en base octal
%x entero en base hexadecimal
%e Un número real en coma flotante, con exponente
%f float
%s String (Cadena de caracteres)
%p puntero

//////VARIABLES Y CONSTANTES
Las variables se pueden definir desde un inicio del proyecto, al igual que en C se pueden definir constantes.
variables: TipoDato NombreDato = ValorDato; | constantes: #define NOMBREDATO ValorDato;

Una constante se delclara usando 'const' antes del tipo y nombre del valor; esto hara que no pueda ser modificada por ningun motivo, y si llegara a ser modificada, el compilador suelta un error.
    Ej: const float gravedad = 9.721;

Unsigned: El valor declarado como unsigned no tendra ningun signo, por lo tanto siempre sera positivo. Esto puede servir para aprovechar el 100% de la capacidad maxima de un tipo de dato (Ej, con byte, enves de tener valores entre -128 a 127, tendra un rango entre 0 y 255)

Arreglo. Estructura de datos mas simple. **Conjunto ordenado de datos del mismo tipo**.
Los arreglos estan compuestos de celdas, cada celda siendo un espacio en el arreglo, se comienza a contar desde la celda 0 hasta la n celda. Cada celda tiene un identificador.

int arr [10]; // TipoDato NombreDato [TamañoArreglo];

Una hoja de excel, es una matriz; no infinita, pero si de muuucha capacidad.

Arreglo fijo. Se define el tamaño del arreglo.
Arreglo dinamico. Su tamaño se adapta a la cantidad de datos. (Se usa cuando no se sabe exactamente la cantidad de datos a recibir).

Aqui no existen Strings, son arreglos de caracteres. Ej. char var[30]; (Tienen tamaño fijo, almenos que sea dinamico)
Para recibir una cadena: scanf("%s", var);
O, una manera mas eficaz: gets(var);
////////////

//////////////LIBRERIAS.

<stdio.h>
 - Permite la lectrura y escritura de datos en el programa ( Standard input/output )
 
<stdlib.h>
 - Proporciona funciones para gestión de memoria, conversión de cadenas, control de procesos, generación de números aleatorios y otras utilidades.
  Es complemento de la libreria stdio. Algunos de los comandos que incluye:
  - MEMORIA
   + malloc(size_type size): Asigna bloque de memoria dinamica a un tamaño especifico
   + realloc(void bloq_asignado, size_type size): Cambia el tamaño de un bloque de memoria previamente asginado
   + free(void bloq_asignado): Libera el bloque de memoria
 - CONVERSION DE CADENAS
   + int atoi(cadena): Convierte una cadena a un entero
   + double atof(cadena): Convierte una cadena a un numero de punto flotante
 - CONTROL PROCESOS
   + void exit(int status): Termina el programa y devuelve un codigo de estado
   + int atexit(void (*funcion)(void)): Llama a una funcion, y termina el programa
 - EXTRAS
   + int rand(): Genera un numero aleatorio
   + int srand(unasigned int semilla): Estable un rango desde el que se generara el numero aleatorio
   + int abs(numero): Devuelve el valor absoluto de un numero

<string.h>
 - strlen(var); Tamaño del String
 - strcpy(var1,var2); Copiar variable
 - srtcat(var1,var2); Concatenar cadenas
 - int val = strcmp(var1,var2);
  + Regresa 0 si son iguales
  + -1 si var1 es alfabeticamente menor que var2
  + 1 si var1 es alfabeticamente mayor que var2
   (var1="Ana";var2="Alan"; var1 es alfabeticamente mayor)

////// ESTRUCTURA DE DATOS

   struct Producto{ // Definir un tipo de dato
    long codigo; 
    float precio;
   }

   struct Producto unProducto;
   unProducto.codigo = 123456789L;
   unProducto.precio = 2.50;
   printf("Producto con codigo &lu y precio %.2f", unProducto.codigo, unProducto.precio);

   typedef struct nombre{

    char name[30];
    char firstLastName[30];
    char secondLastName[30]:
   } Nombre;